%MERGREDSET 

dir = '/Users/LysanneGroenewegen1/STUDIE/RM/Jaar 2/THESIS/MATLAB/OneDrive_1_1-3-2022'

fnames = {'ANL_aaaaaaeb_1.vhdr' 'ANL_aaaaaaeb_2.vhdr' 'ANL_aaaaaaeb_3.vhdr'};

for i = 1:length(fnames)
   fprintf(' Loading file %s \n',fnames{i})
   data(i) = pop_loadbv(fullfile(dir,fnames{i})); 
end

ALLEEG = pop_mergeset(data, [1:length(data)],1)

%preprocessing

%remove non channels
ALLEEG = pop_select(ALLEEG, 'nochannel',{'P0','P1','P2'});
   
%remove bad channels
ALLEEG = pop_clean_rawdata(ALLEEG, 'FlatlineCriterion',5,'ChannelCriterion',0.8,'LineNoiseCriterion',4,'Highpass',[0.25 0.75] ,'BurstCriterion','off','WindowCriterion','off','BurstRejection','off','Distance','Euclidian');

%Pick the average reference electrode in this step 
ALLEEG = pop_reref( ALLEEG, [],'interpchan',[]);

%set the basic filter 1 - 40 
ALLEEG = pop_eegfiltnew(ALLEEG, 'locutoff',1,'hicutoff',40,'plotfreqz',1);
ALLEEG = eeg_checkset( ALLEEG );

%Run the first ICA with default settings
ALLEEG = pop_runica(ALLEEG, 'icatype', 'runica', 'extended',1,'pca',-1,'interrupt','on');

%remove more bad components automatically 
ALLEEG = pop_iclabel(ALLEEG, 'default');
ALLEEG = pop_icflag(ALLEEG, [NaN NaN;0.9 1;0.9 1;NaN NaN;NaN NaN;NaN NaN;NaN NaN]);
ALLEEG = pop_subcomp( ALLEEG, [12], 0);

%look at the data, scroll data and spectral plots 
ALLEEG = eeg_checkset( ALLEEG );
     pop_eegplot( ALLEEG, 0, 1, 1);
     figure; pop_spectopo(ALLEEG, 0, [0  3698679], 'EEG' , 'freq', [10], 'plotchan', 0, 'percent', 20, 'icacomps', [1:67], 'nicamaps', 5, 'freqrange',[2 25],'electrodes','off');

%Remove bad channels more strictly 
ALLEEG = pop_clean_rawdata(ALLEEG, 'FlatlineCriterion','off','ChannelCriterion','off','LineNoiseCriterion','off','Highpass','off','BurstCriterion',20,'WindowCriterion',0.25,'BurstRejection','on','Distance','Euclidian','WindowCriterionTolerances',[-Inf 7] );
     ALLEEG = eeg_checkset( ALLEEG );
     pop_eegplot( ALLEEG, 1, 1, 1);

%OPTIONAL
%FOOOF bilateral
%selecting clusters of electrodes 
AF = ALLEEG.data(22,:),ALLEEG.data(23,:),ALLEEG.data(24,:),ALLEEG.data(25,:),data.data(26,:),data.data(27,:),ALLEEG.data(28,:),ALLEEG.data(29,:)
F = ALLEEG.data(30,:),ALLEEG.data(31,:),ALLEEG.data(32,:),ALLEEG.data(33,:),ALLEEG.data(34,:),ALLEEG.data(35,:),ALLEEG.data(36,:),ALLEEG.data(37,:),ALLEEG.data(38,:)
FC = ALLEEG.data(1,:),ALLEEG.data(2,:),ALLEEG.data(3,:),ALLEEG.data(4,:),ALLEEG.data(5,:),ALLEEG.data(6,:),ALLEEG.data(7,:)
C = ALLEEG.data(8,:),ALLEEG.data(9,:),ALLEEG.data(10,:),ALLEEG.data(11,:),ALLEEG.data(12,:),ALLEEG.data(13,:),ALLEEG.data(14,:)
FT = ALLEEG.data(39,:),ALLEEG.data(40,:)
T = ALLEEG.data(43,:),ALLEEG.data(41,:),ALLEEG.data(42,:),ALLEEG.data(44,:)
TP = ALLEEG.data(45,:),ALLEEG.icaact(46,:)
CP = ALLEEG.data(15,:),ALLEEG.data(16,:),ALLEEG.data(17,:),ALLEEG.data(18,:),ALLEEG.data(19,:),ALLEEG.data(20,:),ALLEEG.data(21,:)
P = ALLEEG.data(47,:),ALLEEG.data(48,:),ALLEEG.data(49,:),ALLEEG.data(50,:),ALLEEG.data(51,:),ALLEEG.data(52,:),ALLEEG.data(53,:),ALLEEG.data(54,:),ALLEEG.data(55,:)
PO = ALLEEG.data(56,:),ALLEEG.data(57,:)

,ALLEEG.data(58,:),ALLEEG.data(59,:)
O = ALLEEG.data(61,:)

%check set
pop_eegplot( EEG, 1, 1, 1);

%check electrode locations 
chanlocs = struct('labels', { 'cz' 'c3' 'c4' 'pz' 'p3' 'p4' 'fz' 'f3' 'f4'});
pop_chanedit( chanlocs );  

%frontal
ALLEEGFrontalElectrode31 = ALLEEG.data(31,:)
ALLEEGFrontalElectrode35 = ALLEEG.data(35,:)

%central 
ALLEEGCentralElectrode1 = ALLEEG.data(1,:)
ALLEEGCentralElectrode61 = ALLEEG.data(61,:)

%sensorimotor right
ALLEEGSensoriElectrode26 = ALLEEG.data(26,:)
ALLEEGSensoriElectrode23 = ALLEEG.data(23,:)
ALLEEGSensoriElectrode25 = ALLEEG.data(25,:)

%sensorimotor left
ALLEEGSensoriElectrode7 = ALLEEG.data(7,:)
ALLEEGSensoriElectrode8 = ALLEEG.data(8,:)
ALLEEGSensoriElectrode9 = ALLEEG.data(9,:)

%occipital 
ALLEEGOccipitalElectrode51 = ALLEEG.data(51,:)
ALLEEGOccipitalElectrode46 = ALLEEG.data(46,:)

%passive electrodes fooof
ActiveElectrodes = {ALLEEGFrontalElectrode31, ALLEEGCentralElectrode61, ALLEEGSensoriElectrode26, ALLEEGSensoriElectrode7, ALLEEGOccipitalElectrode51}
for f = 1:length(ActiveElectrodes)
    [psd, freqs] = pwelch(ActiveElectrodes{f}, 1000, [], [], s_rate);
    freqs = freqs';
    psd = psd';
    settings = struct();  % Use defaults
    f_range = [1, 60];
    fooof_results{f} = fooof(freqs, psd, f_range, settings, true)
    fooof_plot(fooof_results{f})
    title(sprintf('ActiveElectrodes%d',f))
end

%or global activity over the whole data
s = 61
GLOBALACT = ALLEEG.data(i,:)
for i = 1:s
end

%fooof for global acivity 
s_rate = 1000
[psd, freqs] = pwelch(GLOBALACT, 1000, [], [], s_rate);
freqs = freqs';
psd = psd';
settings = struct();  % Use defaults
f_range = [1, 40];
global_fooof_results = fooof(freqs, psd, f_range, settings, true);
fooof_plot(global_fooof_results)
title(sprintf('Global fooof'))

%Sperating the passive events from active data
ALLEEGEVENTS = pop_rmdat( ALLEEG, {'S  1','S  2','S  4'},[-1 1] ,0);
S1 = pop_rmdat( ALLEEG, {'S  1'},[-1 1] ,0);
S2 = pop_rmdat( ALLEEG, {'S  2'},[-1 1] ,0); 
S4 = pop_rmdat( ALLEEG, {'S  4'},[-1 1] ,0); 

%Weights for all events
s = 61
ALLEVENTS = ALLEEGEVENTS.data(i,:)
for i = 1:s
end

% FOOOF
s_rate = 1000
[psd, freqs] = pwelch(ALLEVENTS, 1000, [], [], s_rate);
freqs = freqs';
psd = psd';
settings = struct();  % Use defaults
f_range = [1, 40];
global_fooof_results = fooof(freqs, psd, f_range, settings, true);
fooof_plot(global_fooof_results)
title(sprintf('ALLEVENTS'))

%frontal
FrontalElectrode31 = ALLEEGEVENTS.data(31,:)
FrontalElectrode35 = ALLEEGEVENTS.data(35,:)

%central 
CentralElectrode1 = ALLEEGEVENTS.data(1,:)
CentralElectrode61 = ALLEEGEVENTS.data(61,:)

%sensorimotor right
SensoriElectrode26 = ALLEEGEVENTS.data(26,:)
SensoriElectrode23 = ALLEEGEVENTS.data(23,:)
SensoriElectrode25 = ALLEEGEVENTS.data(25,:)

%sensorimotor left
SensoriElectrode7 = ALLEEGEVENTS.data(7,:)
SensoriElectrode8 = ALLEEGEVENTS.data(8,:)
SensoriElectrode9 = ALLEEGEVENTS.data(9,:)

%occipital 
OccipitalElectrode51 = ALLEEGEVENTS.data(51,:)
OccipitalElectrode46 = ALLEEGEVENTS.data(46,:)

%fooof for all events
ALLSFOOOF = {FrontalElectrode31, CentralElectrode61, SensoriElectrode26, SensoriElectrode7, OccipitalElectrode51}
for ALL = 1:length(ALLSFOOOF)
    [psd, freqs] = pwelch(ALLSFOOOF{ALL}, 1000, [], [], s_rate);
    freqs = freqs';
    psd = psd';
    settings = struct();  % Use defaults
    f_range = [1, 40];
    fooof_results{ALL} = fooof(freqs, psd, f_range, settings, true)
    fooof_plot(fooof_results{ALL})
    title(sprintf('ALLSFOOOF%d',ALL))
end

%S1
%frontal
FrontalElectrode31 = S1.data(31,:)
FrontalElectrode35 = S1.data(35,:)

%central 
CentralElectrode1 = S1.data(1,:)
CentralElectrode61 = S1.data(61,:)

%sensorimotor right
SensoriElectrode26 = S1.data(26,:)
SensoriElectrode23 = S1.data(23,:)
SensoriElectrode25 = S1.data(25,:)

%sensorimotor left
SensoriElectrode7 = S1.data(7,:)
SensoriElectrode8 = S1.data(8,:)
SensoriElectrode9 = S1.data(9,:)

OccipitalElectrode51 = S1.data(51,:)
OccipitalElectrode46 = S1.data(46,:)


S1FOOOF = {FrontalElectrode31, CentralElectrode61, SensoriElectrode26, SensoriElectrode7, OccipitalElectrode51}
for ss1 = 1:length(S1FOOOF)
    [psd, freqs] = pwelch(S1FOOOF{ss1}, 1000, [], [], s_rate);
    freqs = freqs';
    psd = psd';
    settings = struct();  % Use defaults
    f_range = [1, 40];
    fooof_resultsS1 = fooof(freqs, psd, f_range, settings, true)
    fooof_plot(fooof_resultsS1)
    title(sprintf('S1FOOOF%d',ss1))
end


FrontalElectrode31 = S2.data(31,:)
FrontalElectrode35 = S2.data(35,:)

%central 
CentralElectrode1 = S2.data(1,:)
CentralElectrode61 = S2.data(61,:)

%sensorimotor right
SensoriElectrode26 = S2.data(26,:)
SensoriElectrode23 = S2.data(23,:)
SensoriElectrode25 = S2.data(25,:)

%sensorimotor left
SensoriElectrode7 = S2.data(7,:)
SensoriElectrode8 = S2.data(8,:)
SensoriElectrode9 = S2.data(9,:)

OccipitalElectrode51 = S2.data(51,:)
OccipitalElectrode46 = S2.data(46,:)

S2FOOOF = {FrontalElectrode31, CentralElectrode61, SensoriElectrode26, SensoriElectrode7, OccipitalElectrode51}
for ss2 = 1:length(S2FOOOF)
    [psd, freqs] = pwelch(S2FOOOF{ss2}, 1000, [], [], s_rate);
    freqs = freqs';
    psd = psd';
    settings = struct();  % Use defaults
    f_range = [1, 40];
    fooof_resultsS2 = fooof(freqs, psd, f_range, settings, true)
    fooof_plot(fooof_resultsS2)
    title(sprintf('S2FOOOF%d',ss2))
end

%S4
%frontal
FrontalElectrode31 = S4.data(31,:)
FrontalElectrode35 = S4.data(35,:)

%central 
CentralElectrode1 = S4.data(1,:)
CentralElectrode61 = S4.data(61,:)

%sensorimotor right
SensoriElectrode26 = S4.data(26,:)
SensoriElectrode23 = S4.data(23,:)
SensoriElectrode25 = S4.data(25,:)

%sensorimotor left
SensoriElectrode7 = S4.data(7,:)
SensoriElectrode8 = S4.data(8,:)
SensoriElectrode9 = S4.data(9,:)

%occipital
OccipitalElectrode51 = S4.data(51,:)
OccipitalElectrode46 = S4.data(46,:)

S4FOOOF = {FrontalElectrode31, CentralElectrode61, SensoriElectrode26, SensoriElectrode7, OccipitalElectrode51}
for ss4 = 1:length(S4FOOOF)
    [psd, freqs] = pwelch(S4FOOOF{ss4}, 1000, [], [], s_rate);
    freqs = freqs';
    psd = psd';
    settings = struct();  % Use defaults
    f_range = [1, 40];
    fooof_resultsS4 = fooof(freqs, psd, f_range, settings, true)
    fooof_plot(fooof_resultsS4)
    title(sprintf('S4FOOOF%d',ss4))
end


